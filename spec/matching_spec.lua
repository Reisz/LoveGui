package.path = "src/?.lua;src/?/init.lua"
local matcher = require "util.matching"

describe("util.matching", function()
  it("should recognise itself", function()
    assert.is_true(matcher.isMatcher(matcher("_")))
  end)

  it("should not recognise non-matchers", function()
    local m = setmetatable({}, {
      __call = function() return true end,
      __tostring = function() return "_" end
    })
    assert.is_false(matcher.isMatcher(m))
  end)

  it("should prevent access to insecure lua methods", function()
    local m = matcher([[
      function() return io or os or debug or dofile or load or loadfile or setfenv end
    ]])
    assert.is.falsy(m())
  end)

  it("should give access to safe lua methods", function()
    local m = matcher([[
      function() return string and table and math
        and getmetatable and ipairs and next and pairs
        and rawequal and rawget
        and tonumber and tostring and type end
    ]])
    assert.is.truthy(m())
  end)

  describe("utility matchers", function()
    it("should be able to match anything using _", function()
      local m = matcher("_")
      assert.is_true(m(5))
      assert.is_true(m("hi"))
      assert.is_true(m(false))
      assert.is_true(m({3, 4}))
      assert.is_true(m(function() end))
    end)

    it("should be able to match nothing using __", function()
      local m = matcher("__")
      assert.is_false(m(5))
      assert.is_false(m("hi"))
      assert.is_false(m(true))
      assert.is_false(m({3, 4}))
      assert.is_false(m(function() end))
    end)

    it("should allow for optional submatches using may()", function()
      local m = matcher("may(t.number)")
      assert.is_true(m(5))
      assert.is_true(m())
    end)

    it("should be able to match all submatchers using all{}", function()
      local m = matcher("all{t.table, list(_, 3), tbl{v{1},v{2},v{3}}}")
      assert.is_true(m{1,2,3})
      assert.is_false(m{3,2,1})
      assert.is_false(m{})
      assert.is_false(m(5))
      assert.is_false(m())
    end)

    it("should be able to match one submatchers using any{}", function()
      local m = matcher("any{t.table, t.number}")
      assert.is_true(m{1,2,3})
      assert.is_true(m{3,2,1})
      assert.is_true(m{})
      assert.is_true(m(5))
      assert.is_false(m(true))
      assert.is_false(m())
    end)
  end)

  describe("t matcher", function()
    it("should be able to match number", function()
      local m = matcher("t.number")
      assert.is_true(m(5))
      assert.is_false(m("hi"))
      assert.is_false(m(true))
      assert.is_false(m({3, 4}))
      assert.is_false(m(function() end))
      assert.is_false(m())
    end)

    it("should be able to match string", function()
      local m = matcher("t.string")
      assert.is_false(m(5))
      assert.is_true(m("hi"))
      assert.is_false(m(true))
      assert.is_false(m({3, 4}))
      assert.is_false(m(function() end))
      assert.is_false(m())
    end)

    it("should be able to match boolean", function()
      local m = matcher("t.boolean")
      assert.is_false(m(5))
      assert.is_false(m("hi"))
      assert.is_true(m(false))
      assert.is_false(m({3, 4}))
      assert.is_false(m(function() end))
    end)

    it("should be able to match table", function()
      local m = matcher("t.table")
      assert.is_false(m(5))
      assert.is_false(m("hi"))
      assert.is_false(m(true))
      assert.is_true(m({3, 4}))
      assert.is_false(m(function() end))
    end)

    it("should be able to match function", function()
      local m = matcher("t['function']")
      assert.is_false(m(5))
      assert.is_false(m("hi"))
      assert.is_false(m(true))
      assert.is_false(m({3, 4}))
      assert.is_true(m(function() end))
      assert.is_false(m())
    end)
  end)

  it("should match values using v{}", function()
    local m = matcher("v{1,3}")
    assert.is_true(m(1))
    assert.is_false(m(2))
    assert.is_false(m(nil))
    assert.is_false(m("hi"))
    assert.is_false(m())
  end)

  it("should match lists using tbl{}", function()
    local m = matcher("tbl{t.number,t.number,t.string}")
    assert.is_true(m{3,2,"hi"})
    assert.is_false(m{"hi",2,3})
    assert.is_false(m(5))
    assert.is_false(m())
  end)

  it("should match maps using tbl{}", function()
    local m = matcher("tbl{ a = t.number, b = t.number, c = t.string}")
    assert.is_true(m{ a = 3, b = 2, c = "hi"})
    assert.is_true(m{ a = 3, c = "hi", b = 2})
    assert.is_false(m{ a = 3, b = "hi", c = 2})
    assert.is_false(m{"hi",2,3})
    assert.is_false(m(5))
    assert.is_false(m())
  end)

  it("should match single type lists using list()", function()
    local m = matcher("list(t.number)")
    assert.is_true(m{})
    assert.is_true(m{3,2})
    assert.is_false(m{3,2,"hi"})
    assert.is_true(m{ a = 3, b = "hi", c = 2}) -- list section is empty
    assert.is_false(m(5))
    assert.is_false(m())
  end)

  it("should match exact list sizes using list(,)", function()
    local m = matcher("list(_, 3)")
    assert.is_false(m{})
    assert.is_false(m{3,2})
    assert.is_true(m{3,2,"hi"})
    assert.is_false(m{ a = 3, b = "hi", c = 2})
    assert.is_false(m(5))
    assert.is_false(m())
  end)

  it("should match list size ranges using list(,,)", function()
    local m = matcher("list(_, 3, 5)")
    assert.is_false(m{})
    assert.is_false(m{3,2})
    assert.is_true(m{3,2,"hi"})
    assert.is_true(m{3,2,"hi", {}, function() end})
    assert.is_false(m{3,2,"hi", {}, function() end, 5})
    assert.is_false(m{ a = 3, b = "hi", c = 2})
    assert.is_false(m(5))
    assert.is_false(m())
  end)

  it("should have pattern matchig using pt()", function()
    local m = matcher("pt('%d%w%a')")
    assert.is_true(m("1mn"))
    assert.is_true(m("12n"))
    assert.is_false(m("123"))
    assert.is_false(m(""))
    assert.is_false(m(5))
    assert.is_false(m())
  end)

  it("should be able to match tostring results using ts()", function()
    local m = matcher("ts('nil')")
    assert.is_true(m("nil"))
    assert.is_false(m("123"))
    assert.is_false(m(""))
    assert.is_false(m(5))
    assert.is_true(m())
  end)

  it("should be able to match patterns on tostring results using ts_pt()", function()
    local m = matcher("ts_pt('%d%d%d')")
    assert.is_false(m("nil"))
    assert.is_true(m("123"))
    assert.is_false(m(""))
    assert.is_false(m(5))
    assert.is_true(m(534))
    assert.is_false(m())
  end)

  it("should be able to match tonumber results using tn()", function()
    local m = matcher("tn(123)")
    assert.is_true(m("123"))
    assert.is_false(m(""))
    assert.is_false(m(5))
    assert.is_false(m(534))
    assert.is_true(m(123))
    assert.is_false(m())
  end)

  describe("default none matcher", function()
    it("should match nothing", function()
        local m = matcher.none
        assert.is_false(m(5))
        assert.is_false(m("hi"))
        assert.is_false(m({3, 4}))
        assert.is_false(m(function() end))
    end)
    it("should only be created once", function()
      assert.are.equal(matcher.none, matcher.none)
    end)
  end)
end)
