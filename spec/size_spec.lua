local Size = require "util.Size"

describe("util.size", function()
  it("should construct as Size(int, int)", function()
    local s = Size(5,10)
    assert.are.equal(5,s.width)
    assert.are.equal(10,s.height)
  end)
  it("should construct as Size{int, int}", function()
    local s = Size{5,10}
    assert.are.equal(5,s.width)
    assert.are.equal(10,s.height)
  end)
  it("should construct as Size{x=int, y=int}", function()
    local s = Size{x=5,y=10}
    assert.are.equal(5,s.width)
    assert.are.equal(10,s.height)
  end)
  it("should construct as Size{w=int, h=int}", function()
    local s = Size{w=5,h=10}
    assert.are.equal(5,s.width)
    assert.are.equal(10,s.height)
  end)
  it("should construct as Size{width=int, height=int}", function()
    local s = Size{width=5,height=10}
    assert.are.equal(5,s.width)
    assert.are.equal(10,s.height)
  end)
  it("should fail construction for any other input", function()
    assert.has.error(function() Size() end)
    assert.has.error(function() Size{} end)
    assert.has.error(function() Size(1) end)
    assert.has.error(function() Size{1} end)
    assert.has.error(function() Size("1", "3") end)
  end)
  it("should be able to add two sizes together", function()
    local s = Size(1,2) + Size(3,4)
    assert.are.equal(4,s.width)
    assert.are.equal(6,s.height)
  end)
  it("should be able to subtract two sizes together", function()
    local s = Size(1,2) - Size(3,4)
    assert.are.equal(-2,s.width)
    assert.are.equal(-2,s.height)
  end)
  it("should be able to compare two sizes", function()
    assert.is_true(Size(1,2) == Size(1,2))
    assert.is_false(Size(1,2) == Size(3,4))
  end)
  it("should unpack when called", function()
    local x,y = Size(5,10)()
    assert.are.equal(5, x)
    assert.are.equal(10, y)
  end)
  it("should be able to resolve (int, int)", function()
    local s = Size.resolveFunctionArgs(5,10)
    assert.are.equal(5, s.width)
    assert.are.equal(10, s.height)
  end)
  it("should be able to resolve {int, int}", function()
    local s = Size.resolveFunctionArgs{5,10}
    assert.are.equal(5, s.width)
    assert.are.equal(10, s.height)
  end)
  it("should be able to resolve {x=int, y=int}", function()
    local s = Size.resolveFunctionArgs{x=5,y=10}
    assert.are.equal(5, s.width)
    assert.are.equal(10, s.height)
  end)
  it("should be able to resolve {w=int, h=int}", function()
    local s = Size.resolveFunctionArgs{w=5,h=10}
    assert.are.equal(5, s.width)
    assert.are.equal(10, s.height)
  end)
  it("should be able to resolve {width=int, height=int}", function()
    local s = Size.resolveFunctionArgs{width=5,height=10}
    assert.are.equal(5, s.width)
    assert.are.equal(10, s.height)
  end)
  it("should reuse itself when resolving instance of Size", function()
    local s = Size(1,2)
    assert.are.equal(s, Size.resolveFunctionArgs(s))
  end)
end)
