local Point = require "util.Point"

describe("util.Point", function()
  it("should construct as Point(int, int)", function()
    local p = Point(5,10)
    assert.are.equal(5, p.x)
    assert.are.equal(10, p.y)
  end)
  it("should construct as Point{int, int}", function()
    local p = Point{5,10}
    assert.are.equal(5, p.x)
    assert.are.equal(10, p.y)
  end)
  it("should construct as Point{x=int, y=int}", function()
    local p = Point{x=5,y=10}
    assert.are.equal(5, p.x)
    assert.are.equal(10, p.y)
  end)
  it("should construct as Point{w=int, h=int}", function()
    local p = Point{w=5,h=10}
    assert.are.equal(5, p.x)
    assert.are.equal(10, p.y)
  end)
  it("should construct as Point{width=int, height=int}", function()
    local p = Point{width=5,height=10}
    assert.are.equal(5, p.x)
    assert.are.equal(10, p.y)
  end)
  it("should fail for any other input", function()
    assert.has.error(function() Point() end)
    assert.has.error(function() Point{} end)
    assert.has.error(function() Point(1) end)
    assert.has.error(function() Point{1} end)
    assert.has.error(function() Point("1", "3") end)
  end)
  it("should be able to add two points together", function()
    local p = Point(1,2) + Point(3,4)
    assert.are.equal(4, p.x)
    assert.are.equal(6, p.y)
  end)
  it("should be able to subtract two points together", function()
    local p = Point(1,2) - Point(3,4)
    assert.are.equal(-2, p.x)
    assert.are.equal(-2, p.y)
  end)
  it("should be able to compare two points", function()
    assert.is_true(Point(1,2) == Point(1,2))
    assert.is_false(Point(1,2) == Point(3,4))
  end)
  it("should unpack when called", function()
    local x,y = Point(5,10)()
    assert.are.equal(5, x)
    assert.are.equal(10, y)
  end)
  it("should be able to resolve (int, int)", function()
    local p = Point.resolveFunctionArgs(5,10)
    assert.are.equal(5, p.x)
    assert.are.equal(10, p.y)
  end)
  it("should be able to resolve {int, int}", function()
    local p = Point.resolveFunctionArgs{5,10}
    assert.are.equal(5, p.x)
    assert.are.equal(10, p.y)
  end)
  it("should be able to resolve {x=int, y=int}", function()
    local p = Point.resolveFunctionArgs{x=5,y=10}
    assert.are.equal(5, p.x)
    assert.are.equal(10, p.y)
  end)
  it("should be able to resolve {w=int, h=int}", function()
    local p = Point.resolveFunctionArgs{w=5,h=10}
    assert.are.equal(5, p.x)
    assert.are.equal(10, p.y)
  end)
  it("should be able to resolve {width=int, height=int}", function()
    local p = Point.resolveFunctionArgs{width=5,height=10}
    assert.are.equal(5, p.x)
    assert.are.equal(10, p.y)
  end)
  it("should reuse itself when resolving instance of Point", function()
    local p = Point(1,2)
    assert.are.equal(p, Point.resolveFunctionArgs(p))
  end)
end)
