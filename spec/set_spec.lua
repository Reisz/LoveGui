package.path "../src/?.lua;../src/?/init.lua"
local set = require "util.set"

describe("util.set", function()
  describe("when constructed without arguments", function()
    it("should be empty", function()
      assert.are.same({}, set.new())
    end)
    it("should have access to methods", function()
      assert.are.equal(set, getmetatable(set.new()).__index)
    end)
    it("should not resuse metatables", function()
      assert.are_not.equal(getmetatable(set.new()).__index, getmetatable(set.new()).__index)
    end)
  end)
  describe("when constructed with arguments", function()
    it("should contain all the values", function()
      local value = {}
      assert.are.same({["hi"] = true, [5] = true, [value] = true}, set.new("hi", 5, value))
    end)
    it("should have access to methods", function()
      assert.are.equal(set, getmetatable(set.new("hi", 5)).__index)
    end)
    it("should not resuse metatables", function()
      assert.are_not.equal(getmetatable(set.new("hi", 5)).__index, getmetatable(set.new("world", 10)).__index)
    end)
  end)
  describe("manipulation", function()
    it("should add elements", function()
      local s = set.new()
      set.insert(s, "hi")
      assert.are.same(s, { ["hi"] = true })
    end)
    it("should remove elements", function()
      local s = set.new("hi")
      set.remove(s, "hi")
      assert.are.same(s, {})
    end)
    it("should have working checks", function()
      loal s = set.new("hi")
      assert.is_true(set.contains(s, "hi"))
      assert.is_false(set.contains(s, 5))
    end)
  end)
  -- TODO union
  -- TODO intersect
  describe("utility functions", function()
    it("should not iterate with empty set", function()
      local s, sp = set.new(), spy.new(function() end)
      for v in set.it(s) do sp(v) end
      assert.spy(sp).was_not_called()
    end)
    it("should iterate over every element", function()
      local s, sp = set.new("hi", 5), spy.new(function() end)
      for v in set.it(s) do sp(v) end
      assert.spy(sp).was_called_with("hi")
      assert.spy(sp).was_called_with(5)
    end)
    it("should convert empty set to empty list", function()
      assert.are.same(set.toList(set.new()), {})
    end)
    it("should convert set to list", function()
      local list = set.toList(set.new("hi", 5))
      assert.are.equal(list, 2)
      assert.is_true(list[1] == "hi" or list[1] == 5)
      assert.is_true(list[2] == "hi" or list[2] == 5)
    end)
    it("should copy an empty set", function()
      local s = set.new()
      local copy = set.copy(s)
      assert.are.same(s, copy)
      assert.are_not.equal(s, copy)
      assert.are.equal(set, getmetatable(copy).__index)
    end)
    it("should copy itself", function()
      local s = set.new("hi", 5)
      local copy = set.copy(s)
      assert.are.same(s, copy)
      assert.are_not.equal(s, copy)
      assert.are.equal(set, getmetatable(copy).__index)
    end)
  end)
end)
