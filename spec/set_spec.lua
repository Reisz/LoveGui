local set = require "util.set"

describe("util.set", function()

  describe("when constructed without arguments", function()
    it("should be empty", function()
      assert.are.same({}, set.new())
    end)
    it("should have access to methods", function()
      assert.are.equal(set, getmetatable(set.new()).__index)
    end)
    it("should not resuse metatables", function()
      assert.are_not.equal(getmetatable(set.new()), getmetatable(set.new()))
    end)
  end)

  describe("when constructed with arguments", function()
    it("should contain all the values", function()
      local value = {}
      assert.are.same({["hi"] = true, [5] = true, [value] = true}, set.new("hi", 5, value))
    end)
    it("should have access to methods", function()
      assert.are.equal(set, getmetatable(set.new("hi", 5)).__index)
    end)
    it("should not resuse metatables", function()
      assert.are_not.equal(getmetatable(set.new("hi", 5)), getmetatable(set.new("world", 10)))
    end)
  end)

  it("should be able to add elements", function()
    local s = set.new()
    set.insert(s, "hi")
    assert.are.same(s, { ["hi"] = true })
  end)

  it("should be able to remove elements", function()
    local s = set.new("hi")
    set.remove(s, "hi")
    assert.are.same(s, {})
  end)

  it("should have working checks", function()
    local s = set.new("hi")
    assert.is_true(set.contains(s, "hi"))
    assert.is_false(set.contains(s, 5))
  end)

  describe("when calculating a union", function()
    it("should be empty with two empty lists", function()
      local a, b = set.new(), set.new()
      assert.are.same({}, a, set.union(a, b))
    end)
    it("should be a with b empty", function()
      local a, b = set.new("hi", 5), set.new()
      assert.are.same(a, a, set.union(a, b))
    end)
    it("should be b with a empty", function()
      local a, b = set.new(), set.new("hi", 5)
      assert.are.same(b, a, set.union(a, b))
    end)
    it("should work when overlaps are present", function()
      local tbl = {}
      local a, b = set.new("hi", tbl), set.new("hi", 5)
      assert.are.same(set.new("hi", 5, tbl), a, set.union(a, b))
    end)
    it("should work when no overlaps are present", function()
      local a, b = set.new("hi"), set.new(5)
      assert.are.same(set.new("hi", 5), a, set.union(a, b))
    end)
    it("should work when a = b", function()
      local a, b = set.new("hi", 5), set.new("hi", 5)
      assert.are.same(set.new("hi", 5), a, b, set.union(a, b))
    end)
  end)

  describe("when calculation an intersection", function()
    it("should be empty with two empty lists", function()
      local a, b = set.new(), set.new()
      assert.are.same({}, a, set.intersect(a, b))
    end)
    it("should be empty with a empty", function()
      local a, b = set.new("hi", 5), set.new()
      assert.are.same({}, a, set.intersect(a, b))
    end)
    it("should be empty with b empty", function()
      local a, b = set.new(), set.new("hi", 5)
      assert.are.same({}, a, set.intersect(a, b))
    end)
    it("should work when overlaps are present", function()
      local tbl = {}
      local a, b = set.new("hi", tbl), set.new("hi", 5)
      assert.are.same(set.new("hi"), a, set.intersect(a, b))
    end)
    it("should work when no overlaps are present", function()
      local a, b = set.new("hi"), set.new(5)
      assert.are.same({}, a, set.intersect(a, b))
    end)
    it("should work when a = b", function()
      local a, b = set.new("hi", 5), set.new("hi", 5)
      assert.are.same(set.new("hi", 5), a, b, set.intersect(a, b))
    end)
  end)

  it("should not iterate with empty set", function()
    local s, sp = set.new(), spy.new(function() end)
    for v in set.it(s) do sp(v) end
    assert.spy(sp).was_not_called()
  end)

  it("should iterate over every element", function()
    local s, sp = set.new("hi", 5), spy.new(function() end)
    for v in set.it(s) do sp(v) end
    assert.spy(sp).was_called_with("hi")
    assert.spy(sp).was_called_with(5)
  end)

  it("should be able to filter elements", function()
    local s = set.new(1, 2, 6, 9)
    s:filterRemove(function(x) return x > 5 end)
    assert.are.same(set.new(1,2), s)
  end)

  it("should be able to filter elements using additional parameters", function()
    local s = set.new(1, 2, 6, 9)
    s:filterRemove(function(x, max) return x > max end, 6)
    assert.are.same(set.new(1,2,6), s)
  end)

  it("should convert empty set to empty list", function()
    assert.are.same(set.toList(set.new()), {})
  end)

  it("should convert set to list", function()
    local list = set.toList(set.new("hi", 5))
    assert.are.equal(2, #list)
    assert.is_true(list[1] == "hi" or list[1] == 5)
    assert.is_true(list[2] == "hi" or list[2] == 5)
  end)

  it("should copy an empty set", function()
    local s = set.new()
    local copy = set.copy(s)
    assert.are.same(s, copy)
    assert.are_not.equal(s, copy)
    assert.are.equal(set, getmetatable(copy).__index)
  end)

  it("should copy itself", function()
    local s = set.new("hi", 5)
    local copy = set.copy(s)
    assert.are.same(s, copy)
    assert.are_not.equal(s, copy)
    assert.are.equal(set, getmetatable(copy).__index)
  end)
end)
