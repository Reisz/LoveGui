local Rect = require "util.Rect"
local Point, Size = require "util.Point", require "util.Size"

describe("util.Rect", function()
  it("should construct as Rect(Point, Size)", function()
    local p,s = Point(1,2), Size(3,4)
    local r = Rect(p,s)
    assert.are.same(p, r.point)
    assert.are.same(s, r.size)
  end)
  it("should resuse values when constructed as Rect(Point, Size)", function()
    local p,s = Point(1,2), Size(3,4)
    local r = Rect(p,s)
    assert.are.equal(p, r.point)
    assert.are.equal(s, r.size)
  end)
  it("should construct as Rect(table, int, int)", function()
    local r = Rect(Point(1,2),3,4)
    assert.are.same(Point(1,2), r.point)
    assert.are.same(Size(3,4), r.size)
  end)
  it("should construct as Rect(int, int, table)", function()
    local r = Rect(1,2,Size(3,4))
    assert.are.same(Point(1,2), r.point)
    assert.are.same(Size(3,4), r.size)
  end)
  it("should construct as Rect(int, int, int, int)", function()
    local r = Rect(1,2,3,4)
    assert.are.same(Point(1,2), r.point)
    assert.are.same(Size(3,4), r.size)
  end)
  it("should fail construction for any other input", function()
    assert.has.error(function() Rect() end)
    assert.has.error(function() Rect{} end)
    assert.has.error(function() Rect(1) end)
    assert.has.error(function() Rect{1} end)
    assert.has.error(function() Rect("1", "3") end)
    assert.has.error(function() Rect(1,2,3) end)
    assert.has.error(function() Rect({1,2},2) end)
  end)
  it("should have working aabb checks", function()
    local r = Rect(1,1,1,1)
    -- topleft, top, topright, right, botright, bot, botleft, left
    assert.is_false(r:contains(0,0))
    assert.is_false(r:contains(1.5,0))
    assert.is_false(r:contains(3,0))
    assert.is_false(r:contains(3,1.5))
    assert.is_false(r:contains(3,3))
    assert.is_false(r:contains(1.5,3))
    assert.is_false(r:contains(0,3))
    assert.is_false(r:contains(0,1.5))
    -- same on border
    assert.is_true(r:contains(1,1))
    assert.is_true(r:contains(1.5,1))
    assert.is_true(r:contains(2,1))
    assert.is_true(r:contains(2,1.5))
    assert.is_true(r:contains(2,2))
    assert.is_true(r:contains(1.5,2))
    assert.is_true(r:contains(1,2))
    assert.is_true(r:contains(1,1.5))
    -- fully inside
    assert.is_true(r:contains(1.5,1.5))
  end)
end)
